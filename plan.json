{
  "meta": {
    "source": "todo.json",
    "generated_at": "2025-08-11T00:00:00Z",
    "principles": [
      "SvelteKit: load in +page.server.ts; APIs in +server.ts; use error(...)",
      "DB: single Qdrant collection 'i'; include payload 's' in filters; use src/lib/db/index.ts helpers only; wait:true; create for inserts; edit_point for updates; format_filter for filters; vectors len 3072",
      "Auth: locals.user { i, t }; httpOnly cookie 'auth_session'",
      "Design system: use src/app.css utilities only; no Tailwind classes inline; animejs for fades",
      "Types: define minimal interfaces in src/lib/types; snake_case",
      "Security: secrets server-side only; validate input client/server",
      "Testing: 100% coverage for new features; unit + e2e"
    ]
  },
  "phases": [
    {
      "name": "UI polish",
      "tasks": [
        {
          "id": "ui-style-room",
          "title": "Room page shows well (/r/:/page)",
          "desc": "Ensure saved room pages render cleanly using design system.",
          "changes": [
            "Verify /r/[i]/+page.svelte layout uses design utilities from src/app.css",
            "Adjust spacing/typography via custom utility classes only",
            "Use animejs fade for initial mount"
          ],
          "files": ["src/routes/r/[i]/+page.svelte", "src/app.css"],
          "acceptance": [
            "No raw Tailwind utility classes on elements",
            "Layout matches existing design system spacing and typography",
            "No CLS on mount"
          ],
          "tests": [
            "Playwright visual snapshot for /r/:i",
            "Unit test for component props rendering (if split components exist)"
          ],
          "estimate_h": 2,
          "priority": "M"
        },
        {
          "id": "ui-buttons-hover",
          "title": "Buttons hover effects",
          "desc": "Update profile hover color; apply hover effect to all non-disabled buttons; fade color hover like search chats button.",
          "changes": [
            "Extend src/app.css with reusable hover utility classes (if not present)",
            "Ensure .btn base styles include disabled state; add .btn--hover utility",
            "Apply via existing class compositions, not inline Tailwind",
            "Use animejs for hover fade where applicable"
          ],
          "files": ["src/app.css", "src/lib/components/*"],
          "acceptance": [
            "All buttons except disabled show consistent hover per design system",
            "Update profile button changes color on hover with smooth fade"
          ],
          "tests": ["Playwright hover state screenshots on key pages"],
          "estimate_h": 2,
          "priority": "M"
        },
        {
          "id": "ui-user-desc",
          "title": "User description rendering and controls",
          "desc": "On /u/:i show description rules for self vs not-self and CTA.",
          "logic": {
            "path": "u/:i",
            "conditions": {
              "not_self": "Show: You don't have a description yet...",
              "self": {
                "show_description": true,
                "note": "Other users see only common info",
                "button": "Update your description"
              }
            }
          },
          "files": ["src/routes/u/[i]/+page.server.ts", "src/routes/u/[i]/+page.svelte"],
          "acceptance": [
            "Self view shows description and update CTA",
            "Not-self view hides private parts and shows placeholder when missing"
          ],
          "tests": [
            "Server load unit test branches on self vs not-self",
            "E2E verifies CTA visibility toggles"
          ],
          "estimate_h": 3,
          "priority": "H"
        }
      ]
    },
    {
      "name": "Routing: short redirects",
      "tasks": [
        {
          "id": "redirects-users",
          "title": "Alias /u/:t -> /u/:user_i",
          "desc": "Resolve by token/handle t (username/slug/short token) then 302.",
          "impl": {
            "route": "src/routes/u/[t]/+server.ts",
            "logic": [
              "Validate t",
              "Use db.search_by_payload with s='u' and match t in payload",
              "If found user_i -> 302 redirect to /u/${user_i}",
              "Else 404"
            ]
          },
          "acceptance": ["Known handles redirect in <100ms locally", "Unknown -> 404"],
          "tests": ["Unit for resolver; e2e for 302"],
          "estimate_h": 2,
          "priority": "H"
        },
        {
          "id": "redirects-user-chat",
          "title": "Alias /u/:t/c -> /u/:user_i/c",
          "impl": {"route": "src/routes/u/[t]/c/+server.ts"},
          "acceptance": ["302 to canonical chat path"],
          "tests": ["E2E 302 from alias to canonical"],
          "estimate_h": 1,
          "priority": "M",
          "deps": ["redirects-users"]
        },
        {
          "id": "redirects-room",
          "title": "Alias /r/:t -> /r/:room_i",
          "impl": {"route": "src/routes/r/[t]/+server.ts"},
          "acceptance": ["302 to canonical room path"],
          "tests": ["E2E 302"],
          "estimate_h": 1,
          "priority": "M"
        }
      ]
    },
    {
      "name": "User model and UX",
      "tasks": [
        {
          "id": "user-fields",
          "title": "Add user fields: dc, location",
          "desc": "Introduce dc (date created) and optional location schema.",
          "changes": [
            "Define User type in src/lib/types/user.ts",
            "On create: set dc = Date.now()",
            "Location schema: { lat, lon, place?, accuracy?, updated_at }"
          ],
          "db": ["Payload keys must remain compact; consider mapping to c/x if needed"],
          "acceptance": ["New users get dc automatically", "Location optional and validated"],
          "tests": ["Unit tests for validators", "Integration for create flow"],
          "estimate_h": 3,
          "priority": "H"
        },
        {
          "id": "user-edit-location",
          "title": "Profile edit includes location with validation",
          "desc": "Allow users to add/update location; respect privacy notes.",
          "files": [
            "src/routes/u/[i]/edit/+page.server.ts",
            "src/routes/u/[i]/edit/+page.svelte",
            "src/lib/validation/user.ts"
          ],
          "validation": [
            "lat in [-90,90]",
            "lon in [-180,180]",
            "accuracy >= 0"
          ],
          "acceptance": ["Server validates and persists via db.edit_point(wait:true)"],
          "tests": ["Unit validate edge cases", "E2E form submit"],
          "estimate_h": 3,
          "priority": "M",
          "deps": ["user-fields"]
        },
        {
          "id": "user-page-vector-load",
          "title": "User page load: vector search by description",
          "desc": "On /u/:i page load, fetch related results via search_by_vector using user's description.",
          "files": ["src/routes/u/[i]/+page.server.ts"],
          "return_format": {"results": "r"},
          "acceptance": ["Server returns { results } and uses embed.ts"],
          "tests": ["Unit: embedding called once; handles empty description"],
          "estimate_h": 2,
          "priority": "M"
        }
      ]
    },
    {
      "name": "Utils: token counts and message processing",
      "tasks": [
        {
          "id": "util-token-count",
          "title": "Implement token_count(t: string) => number",
          "desc": "t -> token count via Gemini 2.5 Flash (or local heuristic fallback). Server-only.",
          "files": ["src/lib/util/token_count.ts"],
          "impl": [
            "Prefer fast, deterministic heuristic if external not configured",
            "Pluggable provider @ server using env; never expose client"
          ],
          "acceptance": ["Returns number; handles empty/null"],
          "tests": ["Unit: various strings including emojis"],
          "estimate_h": 2,
          "priority": "M"
        },
        {
          "id": "util-get-message-tc",
          "title": "get_message_token_count(m) => number",
          "files": ["src/lib/util/chat/token.ts"],
          "logic": [
            "lastmessage = search_by_payload(filters: r = m.r, d < m.d, payload: 'tc')",
            "return lastmessage.tc + token_count(m.m)"
          ],
          "acceptance": ["Sums prior tc safely when none exists (assume 0)"],
          "tests": ["Unit with and without prior messages"],
          "estimate_h": 2,
          "priority": "M",
          "deps": ["util-token-count"]
        },
        {
          "id": "util-process-message",
          "title": "process_message(message) updates message.tc",
          "files": ["src/lib/util/chat/process_message.ts"],
          "use_in": ["/u/:i/c/+server.ts", "/r/:i/+server.ts"],
          "acceptance": ["Mutates or returns with tc computed"],
          "tests": ["Unit: message with long text; edge cases"],
          "estimate_h": 1,
          "priority": "M",
          "deps": ["util-get-message-tc"]
        }
      ]
    },
    {
      "name": "Components refactor",
      "tasks": [
        {
          "id": "comp-chatbox",
          "title": "Extract ChatBox component",
          "props": {"onsend": "(text: string) => void", "messages": "ChatMessage[]"},
          "files": ["src/lib/components/ChatBox.svelte", "src/lib/types/chat.ts"],
          "acceptance": ["Only UI; no data fetching inside"],
          "tests": ["Unit: renders messages; calls onsend"],
          "estimate_h": 2,
          "priority": "M"
        },
        {
          "id": "comp-userchat",
          "title": "Refactor UserChat from Chat using ChatBox",
          "files": ["src/lib/components/UserChat.svelte", "src/lib/components/Chat.svelte"],
          "acceptance": ["UserChat composes ChatBox; minimal props"],
          "tests": ["Unit: basic render"],
          "estimate_h": 2,
          "priority": "L",
          "deps": ["comp-chatbox"]
        }
      ]
    },
    {
      "name": "AI chat routes and logic",
      "tasks": [
        {
          "id": "ai-route",
          "title": "Create /i/c using ChatBox",
          "files": ["src/routes/i/c/+page.server.ts", "src/routes/i/c/+page.svelte", "src/routes/i/+server.ts"],
          "onsend": "axios.post('/i') (client) -> server /i/+server.ts",
          "create_logic": {
            "requires": "locals.user",
            "fields": {
              "u": "locals.user.i",
              "s": "a",
              "i": "0 if from user, 1 if from ai",
              "string_to_embed": "as per /i/+server.ts without room fields"
            }
          },
          "acceptance": ["401 if unauthenticated", "Message persisted with correct s/u/i"],
          "tests": ["Server route unit; e2e send message"],
          "estimate_h": 4,
          "priority": "H"
        },
        {
          "id": "ai-config",
          "title": "AI system config and tools",
          "desc": "System prompt uses desc; tools search_messages/users/groups; refactor search_messages util.",
          "files": ["src/lib/ai/config.ts", "src/lib/ai/tools.ts", "src/lib/ai/search.ts"],
          "refactor_search_messages": {
            "from": "src/routes/r/[i]/+page.server.ts",
            "args": ["q", "u?", "r?", "s?", "e?"],
            "notes": "Use embeddings to search groups/messages"
          },
          "acceptance": ["Tool functions are server-only and typed"],
          "tests": ["Unit: tools handle empty and bad inputs"],
          "estimate_h": 3,
          "priority": "M",
          "deps": ["ai-route"]
        }
      ]
    },
    {
      "name": "Auth UX",
      "tasks": [
        {
          "id": "auth-post-login-redirect",
          "title": "Redirect to previous page after login",
          "files": ["src/routes/auth/login/+page.server.ts", "src/routes/+layout.server.ts"],
          "impl": [
            "Capture intended URL via signed param util s.ts or session temp store",
            "After login, redirect 302 to captured URL; fallback home"
          ],
          "acceptance": ["Navigating to protected route then login returns you there"],
          "tests": ["E2E: attempt /u/:i/c unauth -> login -> back to /u/:i/c"],
          "estimate_h": 2,
          "priority": "M"
        }
      ]
    },
    {
      "name": "Item domain",
      "tasks": [
        {
          "id": "item-unify",
          "title": "Unify Item payload fields",
          "desc": "Type Item with compact fields: v,q,kind,location{lat,lon,address?,place?,geohash?}",
          "files": ["src/lib/types/item.ts", "src/lib/db/index.ts"],
          "acceptance": ["CRUD uses compact keys; s value distinguishes type"],
          "tests": ["Unit: type guards and serialization"],
          "estimate_h": 3,
          "priority": "H"
        },
        {
          "id": "item-create",
          "title": "Create: summary via Gemini; images via IBM COS; store URLs",
          "files": [
            "src/routes/i/create/+page.svelte",
            "src/routes/i/create/+page.server.ts",
            "src/lib/integrations/ibm_cos.ts"
          ],
          "impl": [
            "Generate description summary (q) server-side using embed/generative util if configured",
            "Upload images to COS; primary_image flag in payload",
            "UI: primary prominent; others in horizontal scroll; click to viewer"
          ],
          "acceptance": ["Images upload securely; URLs stored; primary default first"],
          "tests": ["Unit: uploader stubs; e2e: create flow without real COS (mock)"],
          "estimate_h": 6,
          "priority": "M",
          "deps": ["item-unify"]
        },
        {
          "id": "item-page",
          "title": "Item page /i/:i UI",
          "files": ["src/routes/i/[i]/+page.server.ts", "src/routes/i/[i]/+page.svelte"],
          "ui": ["all details", "chat with owner button", "summary accordion", "AI chat link"],
          "acceptance": ["Buttons visible and wired to routes"],
          "tests": ["E2E smoke + snapshots"],
          "estimate_h": 3,
          "priority": "M",
          "deps": ["item-unify"]
        },
        {
          "id": "item-search-nearby",
          "title": "Nearby search API /i/search_nearby",
          "files": ["src/routes/i/search_nearby/+server.ts", "src/lib/util/geo.ts"],
          "params": ["lat","lon","radius","unit=meters|miles","kind?","limit=50","q?"],
          "algorithm": [
            "1 validate lat/lon/radius",
            "2 convert miles->meters",
            "3 compute bounding box (latDelta, lonDelta)",
            "4 filter in Qdrant by payload ranges (or geohash prefix)",
            "5 if q: vector search limited to candidates",
            "6 cap candidates (<=500)",
            "7 server-side haversine distance precise",
            "8 sort by distance asc (or relevance if q)",
            "9 pagination via cursor (last id + distance)",
            "10 handle dateline/high-latitude/large radius edge cases",
            "11 privacy flags respected"
          ],
          "acceptance": [
            "Returns distance per item",
            "Respects limit and unit",
            "Rejects invalid inputs with error(status,msg)"
          ],
          "tests": [
            "Unit: geo math incl. dateline",
            "Integration: mocked Qdrant helpers with payload filters"
          ],
          "estimate_h": 5,
          "priority": "H",
          "deps": ["item-unify"]
        }
      ]
    },
    {
      "name": "Refactors: chat components and AI suggestion",
      "tasks": [
        {
          "id": "ref-chatmessage",
          "title": "Extract ChatMessage type from Chat",
          "files": ["src/lib/types/chat.ts"],
          "acceptance": ["Used across ChatBox/UserChat"],
          "tests": ["Type compile checks"],
          "estimate_h": 1,
          "priority": "M"
        },
        {
          "id": "ref-chatinput",
          "title": "Refactor ChatInput; add AI suggestion",
          "files": [
            "src/lib/components/ChatInput.svelte",
            "src/routes/api/chat/suggest/+server.ts"
          ],
          "onmount": "focus input",
          "ai_suggestion": {
            "ui": "AI icon inside input (right)",
            "click": "Calls suggestion route with receiver id",
            "server_logic": {
              "get_last_message": "search_by_payload sort by d",
              "context_messages": "tc > last.tc-1000000",
              "add_user_description": "if locals.user exist",
              "prompt": "Suggest next message from context"
            }
          },
          "acceptance": ["Icon click returns suggestion within 1s (mock ok)", "Input focused on mount"],
          "tests": ["Unit: route merges context; e2e: suggestion populates input"],
          "estimate_h": 4,
          "priority": "M",
          "deps": ["util-process-message", "comp-chatbox"]
        }
      ]
    }
  ],
  "dependencies_graph": [
    ["redirects-users", "redirects-user-chat"],
    ["comp-chatbox", "comp-userchat"],
    ["util-token-count", "util-get-message-tc"],
    ["util-get-message-tc", "util-process-message"],
    ["item-unify", "item-create"],
    ["item-unify", "item-page"],
    ["item-unify", "item-search-nearby"]
  ],
  "milestones": [
    {"name": "M1: Redirects + User UX", "includes": ["redirects-users","redirects-user-chat","redirects-room","ui-user-desc","user-page-vector-load"]},
    {"name": "M2: Chat components + token utils", "includes": ["comp-chatbox","ref-chatmessage","util-token-count","util-get-message-tc","util-process-message"]},
    {"name": "M3: AI chat route + tools", "includes": ["ai-route","ai-config","ref-chatinput"]},
    {"name": "M4: Items + nearby search", "includes": ["item-unify","item-page","item-search-nearby","item-create"]},
    {"name": "M5: UI polish + auth UX", "includes": ["ui-style-room","ui-buttons-hover","auth-post-login-redirect"]}
  ],
  "risk_notes": [
    "External services (Gemini, IBM COS) require env and stubs; gate behind feature flags",
    "Qdrant payload range filters/geohash: confirm support; otherwise precompute geohash",
    "Design system constraint: avoid Tailwind utilities directly; ensure app.css utilities sufficient"
  ],
  "done_definition": [
    "All acceptance criteria pass",
    "100% test coverage for new modules",
    "No secrets or direct Qdrant client usage outside src/lib/db/index.ts",
    "Lint/format clean; Types defined in src/lib/types"
  ]
}

